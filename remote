#! /bin/bash

USAGE="usage: remote [-h] [-r <remote>] [-t <type (fetch or push)> [-b <branch>] file"

SHOW_ALL_PRS=""
PR=""

while getopts ":hPpr:t:b:m" opt; do
    case $opt in
        h)
            echo "$USAGE"
            echo "\nOpen the remote repository in the browser."
            exit 0
            ;;
        P)
            SHOW_ALL_PRS="Y"
            shift $(( OPTIND - 1 ));
            ;;
        p)
            PR="Y"
            shift $(( OPTIND - 1 ));
            ;;
        r)
            REMOTE="$OPTARG"
            shift $(( OPTIND - 1 ));
            ;;
        t)
            TYPE="$OPTARG"
            shift $(( OPTIND - 1 ));
            ;;
        b)
            BRANCH="$OPTARG"
            shift $(( OPTIND - 1 ));
            ;;
        m)
            BRANCH="master"
            shift $(( OPTIND - 1 ));
            ;;
        \?)
            echo "Invalid option: -$OPTARG"
            echo "$USAGE"
            exit 1
            ;;
    esac
done

DIR=`pwd`

if [[ -n "$1" ]]; then
    FILEDIR=$(dirname `ls -d -F "$1" | sed 's:\/$:/.:'`)
    if [[ $? != 0 ]]; then
        exit 1
    fi
    FILENAME=`echo $1 | sed "s|$FILEDIR/||"`
    cd "$FILEDIR"
    FILEDIR=`pwd`
    CURRENT_DIR="$DIR"
    DIR="$FILEDIR/$FILENAME"
fi

ERR=$(git remote -v 2>&1 >/dev/null)
if [[ -n "$ERR" ]]; then
    echo "ERROR: Not a git repository. Initialize a git repository with 'git init'."
    exit 1
fi

TYPE="fetch"
REMOTES=`git remote -v | grep "$REMOTE" | grep "$TYPE"`

# try with remote as set (or "") and type as set (or "fetch")
# if there's more than one of these, try with remote as origin
# if there's no origin, error with don't know

case $(echo "$REMOTES\n" | wc -l | awk '{print $1}') in
    0)
        echo "ERROR: No remotes are set. Add a remote with 'git remote add <name> <url>'."
        exit 1
        ;;
    1)
        ;;
    *)
        REMOTES=`echo $REMOTES | grep origin`
        if [[ -z "$REMOTES" ]]; then
            echo "ERROR: not sure which remote to open. Specify a remote with '-r <remote>'"
            exit 1
        fi
        ;;
esac
# remove .git suffix
URL=$(echo $REMOTES | awk '{print $2}' | sed 's/\.git$//')

HOST=${URL%%[:/]*}
REPO=${URL##$HOST[:/]}
HOST=${HOST/#git@/"https://"}

# For -P option to open list of PRs (no branch name needed)
if [[ -n "$SHOW_ALL_PRS" ]]; then
    MSG="View all open pull requests."
    URL_PATH="/pulls"

else # other options

    # use current branch if one wasn't specified
    if [[ -z "$BRANCH" ]]; then
         BRANCH=$(git status | head -1 | sed 's/On branch //')
    fi

    # if -p option set, find PR or get url to open one
    if [[ -n "$PR" ]]; then
        # Get PR number for current branch from source log
        PR=`git log --source @^! HEAD --pretty=tformat:'%D' | awk 'BEGIN {RS=", "; FS="/";} /pr/ {print $3}'`

        if [[ -n "$PR" ]]; then
            # if PR exists, set url to open it
            MSG="View PR#$PR, pull request to merge commits from '$BRANCH'."
            URL_PATH="pull/$PR"
        else
            # set url to path where one can be opened
            MSG="Open a new pull request for the branch '$BRANCH'."
            URL_PATH="compare/$BRANCH?expand=1"
        fi
    else
        # Open specified file (will be current dir)
        FILE=`echo "$DIR" | sed "s|$(git rev-parse --show-toplevel)||"`
        MSG="View file .$FILE"
        URL_PATH="tree/$BRANCH$FILE"
    fi
fi

# Go back to user's current directory
if [ -z "$CURRENT_DIR" ]; then
    cd "$CURRENT_DIR"
fi

URL="$HOST/$REPO/$URL_PATH"
_RESET="\033[0m"
_UNDERLINE="\033[4m"
_GREY="\033[0;37m"
_BLUE="\033[0;34m"
_GREEN="\033[0;32m"
_RED="\033[0;31m"

echo -e "Opening URL on remote..."
echo -e "  $_GREY$MSG"
echo -e "  $_BLUE$URL$_RESET"

open "$URL"
RES=$?
if [[ "$RES" == 0 ]]; then
    echo -e "$_GREEN""URL open.$_RESET"
else
    echo -e "$_RED""Failed to open URL.$_RESET"
fi
exit $RES
